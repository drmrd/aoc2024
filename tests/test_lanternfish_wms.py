from aoc2024.lanternfish_wms import Warehouse, DummyThiccWall, DummyThiccBox


def test_roe_bot_movement_day15_part1_small_example():
    warehouse = Warehouse.from_lanternfish_printout(
        map_=[
            '########',
            '#..O.O.#',
            '##@.O..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#......#',
            '########'
        ],
        roe_bot_routine='<^^>>>vv<v>>v<<'
    )
    roe_bot = warehouse.roe_bot

    expected_maps = [
        '\n'.join([
            '########',
            '#..O.O.#',
            '##@.O..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#......#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#.@O.O.#',
            '##..O..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#......#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#.@O.O.#',
            '##..O..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#......#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#..@OO.#',
            '##..O..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#......#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#...@OO#',
            '##..O..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#......#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#...@OO#',
            '##..O..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#......#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##..@..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##..@..#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##.@...#',
            '#...O..#',
            '#.#.O..#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##.....#',
            '#..@O..#',
            '#.#.O..#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##.....#',
            '#...@O.#',
            '#.#.O..#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##.....#',
            '#....@O#',
            '#.#.O..#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##.....#',
            '#.....O#',
            '#.#.O@.#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##.....#',
            '#.....O#',
            '#.#O@..#',
            '#...O..#',
            '#...O..#',
            '########'
        ]),
        '\n'.join([
            '########',
            '#....OO#',
            '##.....#',
            '#.....O#',
            '#.#O@..#',
            '#...O..#',
            '#...O..#',
            '########'
        ])
    ]
    for direction, expected_map in zip(roe_bot.routine, expected_maps):
        roe_bot.move(direction)
        assert warehouse.to_lanternfish_map() == expected_map

    expected_map = '\n'.join([
        '########',
        '#....OO#',
        '##.....#',
        '#.....O#',
        '#.#O@..#',
        '#...O..#',
        '#...O..#',
        '########'
    ])
    assert warehouse.to_lanternfish_map() == expected_map


def test_roe_bot_movement_day15_part1_large_example():
    warehouse = Warehouse.from_lanternfish_printout(
        map_=[
            '##########',
            '#..O..O.O#',
            '#......O.#',
            '#.OO..O.O#',
            '#..O@..O.#',
            '#O#..O...#',
            '#O..O..O.#',
            '#.OO.O.OO#',
            '#....O...#',
            '##########'
        ],
        roe_bot_routine=''.join([
            '<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^',
            'vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v',
            '><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<',
            '<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^',
            '^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><',
            '^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^',
            '>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^',
            '<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>',
            '^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>',
            'v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^'
        ])
    )
    roe_bot = warehouse.roe_bot

    for direction in roe_bot.routine:
        roe_bot.move(direction)

    expected_map = '\n'.join([
        '##########',
        '#.O.O.OOO#',
        '#........#',
        '#OO......#',
        '#OO@.....#',
        '#O#.....O#',
        '#O.....OO#',
        '#O.....OO#',
        '#OO....OO#',
        '##########'
    ])
    assert warehouse.to_lanternfish_map() == expected_map


def test_roe_bot_movement_day15_part2_small_example():
    warehouse = Warehouse.from_lanternfish_printout(
        map_=[
            '##############',
            '##......##..##',
            '##..........##',
            '##....[][]@.##',
            '##....[]....##',
            '##..........##',
            '##############'
        ],
        roe_bot_routine='<vv<<^^<<^^',
        passive_entity_types=(DummyThiccWall, DummyThiccBox)
    )
    roe_bot = warehouse.roe_bot

    expected_maps = [
        '\n'.join([
            '##############',
            '##......##..##',
            '##..........##',
            '##...[][]@..##',
            '##....[]....##',
            '##..........##',
            '##############'
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##..........##',
            '##...[][]...##',
            '##....[].@..##',
            '##..........##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##..........##',
            '##...[][]...##',
            '##....[]....##',
            '##.......@..##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##..........##',
            '##...[][]...##',
            '##....[]....##',
            '##......@...##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##..........##',
            '##...[][]...##',
            '##....[]....##',
            '##.....@....##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##...[][]...##',
            '##....[]....##',
            '##.....@....##',
            '##..........##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##...[][]...##',
            '##....[]....##',
            '##.....@....##',
            '##..........##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##...[][]...##',
            '##....[]....##',
            '##....@.....##',
            '##..........##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##...[][]...##',
            '##....[]....##',
            '##...@......##',
            '##..........##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##......##..##',
            '##...[][]...##',
            '##...@[]....##',
            '##..........##',
            '##..........##',
            '##############',
        ]),
        '\n'.join([
            '##############',
            '##...[].##..##',
            '##...@.[]...##',
            '##....[]....##',
            '##..........##',
            '##..........##',
            '##############',
        ])
    ]
    for direction, expected_map in zip(roe_bot.routine, expected_maps):
        roe_bot.move(direction)
        assert warehouse.to_lanternfish_map() == expected_map


def test_roe_bot_movement_day15_part2_large_example():
    warehouse = Warehouse.from_lanternfish_printout(
        map_=[
            '####################',
            '##....[]....[]..[]##',
            '##............[]..##',
            '##..[][]....[]..[]##',
            '##....[]@.....[]..##',
            '##[]##....[]......##',
            '##[]....[]....[]..##',
            '##..[][]..[]..[][]##',
            '##........[]......##',
            '####################'
        ],
        roe_bot_routine=''.join([
            '<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^',
            'vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v',
            '><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<',
            '<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^',
            '^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><',
            '^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^',
            '>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^',
            '<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>',
            '^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>',
            'v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^'
        ]),
        passive_entity_types=(DummyThiccWall, DummyThiccBox)
    )
    roe_bot = warehouse.roe_bot

    for direction in roe_bot.routine:
        roe_bot.move(direction)

    expected_map = '\n'.join([
        '####################',
        '##[].......[].[][]##',
        '##[]...........[].##',
        '##[]........[][][]##',
        '##[]......[]....[]##',
        '##..##......[]....##',
        '##..[]............##',
        '##..@......[].[][]##',
        '##......[][]..[]..##',
        '####################'
    ])
    assert warehouse.to_lanternfish_map() == expected_map


def test_from_lanternfish_printout_day15_part2_large_example_dummy_thicc():
    warehouse = Warehouse.from_lanternfish_printout(
        map_=[
            '##########',
            '#..O..O.O#',
            '#......O.#',
            '#.OO..O.O#',
            '#..O@..O.#',
            '#O#..O...#',
            '#O..O..O.#',
            '#.OO.O.OO#',
            '#....O...#',
            '##########'
        ],
        roe_bot_routine=''.join([
            '<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^',
            'vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v',
            '><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<',
            '<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^',
            '^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><',
            '^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^',
            '>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^',
            '<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>',
            '^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>',
            'v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^'
        ]),
        passive_entity_types=(DummyThiccWall, DummyThiccBox),
        dummy_thiccen=True
    )
    roe_bot = warehouse.roe_bot

    actual_initial_map = warehouse.to_lanternfish_map()
    for direction in roe_bot.routine:
        roe_bot.move(direction)

    expected_initial_map = '\n'.join([
        '####################',
        '##....[]....[]..[]##',
        '##............[]..##',
        '##..[][]....[]..[]##',
        '##....[]@.....[]..##',
        '##[]##....[]......##',
        '##[]....[]....[]..##',
        '##..[][]..[]..[][]##',
        '##........[]......##',
        '####################'
    ])
    expected_final_map = '\n'.join([
        '####################',
        '##[].......[].[][]##',
        '##[]...........[].##',
        '##[]........[][][]##',
        '##[]......[]....[]##',
        '##..##......[]....##',
        '##..[]............##',
        '##..@......[].[][]##',
        '##......[][]..[]..##',
        '####################'
    ])
    assert actual_initial_map == expected_initial_map
    assert warehouse.to_lanternfish_map() == expected_final_map


def test_gps_coordinates_day15_part2_large_example_dummy_thicc():
    warehouse = Warehouse.from_lanternfish_printout(
        map_=[
            '##########',
            '#..O..O.O#',
            '#......O.#',
            '#.OO..O.O#',
            '#..O@..O.#',
            '#O#..O...#',
            '#O..O..O.#',
            '#.OO.O.OO#',
            '#....O...#',
            '##########'
        ],
        roe_bot_routine=''.join([
            '<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^',
            'vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v',
            '><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<',
            '<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^',
            '^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><',
            '^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^',
            '>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^',
            '<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>',
            '^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>',
            'v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^'
        ]),
        passive_entity_types=(DummyThiccWall, DummyThiccBox),
        dummy_thiccen=True
    )
    roe_bot = warehouse.roe_bot

    for direction in roe_bot.routine:
        roe_bot.move(direction)

    assert sum(
        entity.gps_coordinate
        for row in warehouse.grid
        for entity in row[::2]
        if isinstance(entity, DummyThiccBox)
    ) == 9021
